/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package examples.poPacMan.DeepNeuralNetwork;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author Giang
 */
public class NeuralNetworkForm extends javax.swing.JFrame {

    /**
     * Creates new form TestNeuralNetWork
     */
    NNNet neuralNetwork;

    int reg_height;
    int reg_width;
    int reg_space;
    int layer_space;
    boolean autoUpdate = false;

    public NeuralNetworkForm() {
        initComponents();
        reg_height = 30;
        reg_width = 80;
        reg_space = 30;
        layer_space = 70;
        autoUpdate = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(java.awt.Color.black);
        setResizable(false);

        jLabel1.setText("jLabel1");

        jButton1.setText("Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Start");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 813, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(562, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2))
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        neuralNetwork.generateInput();
        neuralNetwork.canculateNetwork();
        neuralNetwork.backpropagate();
        neuralNetwork.updateWeight();
        
        System.out.println(Math.abs(neuralNetwork.error)+" - " + neuralNetwork.getExactvalue()+" - " + neuralNetwork.outputValue);
     
        repaint();
        validate();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        if (jButton2.getText() =="Start")jButton2.setText("Stop");
        if (jButton2.getText() =="Stop")jButton2.setText("Start");
        this.autoUpdate = !this.autoUpdate;
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    
    boolean firstTime  = false;
    public void paint(Graphics g) {
       
         
        
        g.setColor(Color.black);
        g.fillRect(0, 0, 1000, 500);
        g.setColor(Color.white);

        // draw Input 
        for (int i = 0; i < neuralNetwork.inputNetwork.numOfNode; i++) {
            g.drawRect((1) * reg_width + (0) * layer_space, (i + 1) * reg_height + (i + 1) * reg_space, reg_width, reg_height);
            double inputValue = neuralNetwork.inputNetwork.listOfNode.get(i).inputValue;
            g.drawString(inputValue + "", (1) * reg_width + (0) * layer_space + reg_width / 3 + 5, (i + 1) * reg_height + (i + 1) * reg_space + 20);

        }

        for (int i = 0; i < neuralNetwork.inputNetwork.numOfNode; i++) {
            int x1 = (1) * reg_width + (0) * layer_space + reg_width;
            int y1 = (i + 1) * reg_height + (i + 1) * reg_space + reg_height / 2;
            int x2 = (2) * reg_width + (1) * layer_space;
            for (int k = 0; k < neuralNetwork.inputNetwork.listOfNode.get(i).layerOutput.numOfNode; k++) {
                int y2 = (k + 1) * reg_height + (k + 1) * reg_space + reg_height / 2;
                g.drawLine(x1, y1, x2, y2);

            }

        }

        // each layer
        for (int i = 0; i < neuralNetwork.numOfLayer; i++) {
            for (int j = 0; j < neuralNetwork.hiddenLayers.get(i).numOfNode; j++) {
                g.drawRect((i + 2) * reg_width + (i + 1) * layer_space, (j + 1) * reg_height + (j + 1) * reg_space, reg_width / 2, reg_height);
                g.drawRect((i + 2) * reg_width + (i + 1) * layer_space + reg_width / 2, (j + 1) * reg_height + (j + 1) * reg_space, reg_width / 2, reg_height);

                double inputValueX = this.neuralNetwork.hiddenLayers.get(i).listOfNode.get(j).inputValue;
                double outputValueX = this.neuralNetwork.hiddenLayers.get(i).listOfNode.get(j).outputValue;

                String inputValue = String.format("%.02f", inputValueX);
                String outputValue = String.format("%.02f", outputValueX);

                g.drawString(inputValue + "", (i + 2) * reg_width + (i + 1) * layer_space + 5, (j + 1) * reg_height + (j + 1) * reg_space + 20);
                g.drawString(outputValue + "", (i + 2) * reg_width + (i + 1) * layer_space + reg_width / 2 + 5, (j + 1) * reg_height + (j + 1) * reg_space + 20);

            }
        }

        // draw line output
        for (int i = 0; i < neuralNetwork.numOfLayer; i++) {
            if (neuralNetwork.hiddenLayers.get(i).outputLayer != null) {
                for (int j = 0; j < neuralNetwork.hiddenLayers.get(i).numOfNode; j++) {
                    int x1 = (i + 2) * reg_width + (i + 1) * layer_space + reg_width;
                    int y1 = (j + 1) * reg_height + (j + 1) * reg_space + reg_height / 2;
                    int x2 = (i + 3) * reg_width + (i + 2) * layer_space;

                    for (int k = 0; k < neuralNetwork.hiddenLayers.get(i).listOfNode.get(j).layerOutput.numOfNode; k++) {
                        int y2 = (k + 1) * reg_height + (k + 1) * reg_space + reg_height / 2;
                        g.drawLine(x1, y1, x2, y2);

                    }
                }
            }
        }

        int numOfLayer = neuralNetwork.numOfLayer;
        // draw output 
        for (int i = 0; i < neuralNetwork.outputNetwork.numOfNode; i++) {
            g.drawRect((numOfLayer + 2) * reg_width + (numOfLayer + 1) * layer_space, (i + 1) * reg_height + (i + 1) * reg_space, reg_width, reg_height);
            double inputValueX = neuralNetwork.outputNetwork.listOfNode.get(i).inputValue;
            String inputValue = String.format("%.02f", inputValueX);

            g.drawString(inputValue + "", (numOfLayer + 2) * reg_width + (numOfLayer + 1) * layer_space + reg_width / 3 + 5, (i + 1) * reg_height + (i + 1) * reg_space + 20);

        }

        //   repaint();
        //  validate();
        String fomular = "";
        int listP[] = new int[]{1,1,1};
        for (int i = 0; i < neuralNetwork.inputNetwork.numOfNode; i++) {
            fomular += "" + (int) neuralNetwork.inputNetwork.listOfNode.get(i).inputValue + "x" + listP[i] + " + ";
        }

        String convertFloatString = String.format("%.02f", neuralNetwork.getExactvalue());
        fomular += " = " +convertFloatString;
        convertFloatString = String.format("%.02f", neuralNetwork.getError());
        fomular += "       Error : ";
        fomular += convertFloatString;

        this.jLabel1.setText(fomular);
        
        firstTime = true;
         
    }
    
    public void clickUpdate () {
        jButton1ActionPerformed(null);
    }
   
}
