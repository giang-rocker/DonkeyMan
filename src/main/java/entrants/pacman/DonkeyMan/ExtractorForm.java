/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package entrants.pacman.DonkeyMan;

import java.awt.Color;
import java.awt.Graphics;
import pacman.game.Constants.GHOST;
import pacman.game.Game;


/**
 *
 * @author giang-rocker
 */
public class ExtractorForm extends javax.swing.JFrame {

    /**
     * Creates new form ExtractorForm
     */
    Game gameX;
    int scale = 4;
    int margin = 50;
    int defaultWidth = 108;
    int defaultHeight = 116;

    public ExtractorForm() {
        initComponents();

        gameX = null;
        this.setSize(margin * 2 + defaultWidth * scale, margin * 2 + defaultHeight * scale);
       

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ExtractorForm");
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(java.awt.Color.black);
        setName("Extractor Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void paint(Graphics g) {
        //  g.setColor(Color.black);

        g.clearRect(1, 1, margin * 2 + defaultWidth * scale - 2, margin * 2 + defaultHeight * scale - 2);
        int count = 0;
        int X,Y;
        g.setColor(Color.red);
        if (gameX != null) {

            int listPillIndice[] = gameX.getActivePillsIndices();
            //   System.out.println(gameX.getMazeIndex()+"XX");

            for (int i = 0; i < listPillIndice.length; i++) {
                int nodeIndex = listPillIndice[i];
                 X = gameX.getNodeXCood(nodeIndex);
                 Y = gameX.getNodeYCood(nodeIndex);

                g.fillRect(margin + X * scale + 1 * scale / 2, margin + Y * scale + 1 * scale / 2, 1 * scale / 2, 1 * scale / 2);

            }

            g.setColor(Color.yellow);
            //draw Pacman
            int PacmanIndex = gameX.getPacmanCurrentNodeIndex();
             X = gameX.getNodeXCood(PacmanIndex);
             Y = gameX.getNodeYCood(PacmanIndex);
            g.fillRect(margin + X * scale  - 16 * scale / 8, margin + Y * scale - 16 * scale / 8, 16 * scale/4  , 16 * scale/4 );
            // end of draw Pacman
            
            g.setColor(Color.GREEN);
            //drawGHOst
            for (GHOST ghost : GHOST.values()) {
            //draw Pacman
            int ghostIndex = gameX.getGhostCurrentNodeIndex(ghost);
            if (ghostIndex==-1) continue;
            if (gameX.isGhostEdible(ghost)) g.setColor(Color.blue);
             X = gameX.getNodeXCood(ghostIndex);
             Y = gameX.getNodeYCood(ghostIndex);
            g.fillRect(margin + X * scale  - 16 * scale / 8, margin + Y * scale - 16 * scale / 8, 16 * scale/4  , 16 * scale/4 );
            // end of draw Pacman
            
            }
            
        }
        revalidate();
        repaint();

    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
